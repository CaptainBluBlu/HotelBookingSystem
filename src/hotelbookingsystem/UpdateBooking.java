/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hotelbookingsystem;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Scanner;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.RowFilter;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author Glenn Lim Phang Zhen
 */
public class UpdateBooking extends javax.swing.JFrame {

    /**
     * Creates new form UpdateBooking
     */
    public UpdateBooking() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblUpdateBooking = new javax.swing.JTable();
        txtContactNumber = new javax.swing.JTextField();
        txtEmail = new javax.swing.JTextField();
        cmbDuration = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        cmbRoomNo = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();
        cmbDay = new javax.swing.JComboBox<>();
        txtCustomerName = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtCustomerIC = new javax.swing.JTextField();
        btnUpdate = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        btnCheck = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        txtSearch = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                formWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
            }
        });

        jLabel2.setFont(new java.awt.Font("Tw Cen MT Condensed", 0, 50)); // NOI18N
        jLabel2.setText("Getwellsoon Hotel");

        tblUpdateBooking.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Room No", "Start Day", "Duration", "Customer IC", "Customer Name", "Customer Email", "Customer Contact"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblUpdateBooking.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblUpdateBookingMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblUpdateBooking);
        if (tblUpdateBooking.getColumnModel().getColumnCount() > 0) {
            tblUpdateBooking.getColumnModel().getColumn(0).setResizable(false);
        }

        cmbDuration.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "- Duration -", "1", "2", "3", "4", "5", "6", " " }));

        jLabel7.setText("Day of Booking : ");

        jLabel8.setText("Duration :");

        jLabel9.setText("Night(s)");

        jLabel10.setText("Room :");

        cmbDay.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "- Days -", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday" }));

        txtCustomerName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCustomerNameActionPerformed(evt);
            }
        });

        jLabel3.setText("Customer Name : ");

        jLabel4.setText("IC /  Passport No :");

        jLabel5.setText("Contac Number :");

        jLabel6.setText("Email :");

        btnUpdate.setFont(new java.awt.Font("SimHei", 1, 18)); // NOI18N
        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnCheck.setText("Check");
        btnCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckActionPerformed(evt);
            }
        });

        btnDelete.setFont(new java.awt.Font("SimHei", 1, 18)); // NOI18N
        btnDelete.setText("Delete Record");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        txtSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchActionPerformed(evt);
            }
        });
        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtSearchKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
        });

        jLabel1.setText("Find Room:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(53, 53, 53)
                                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel7)
                                        .addComponent(jLabel8))
                                    .addGap(25, 25, 25)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(cmbDay, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(cmbDuration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(jLabel9))))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel6)
                                        .addComponent(jLabel5)
                                        .addComponent(jLabel10)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel3)))
                                    .addGap(18, 18, 18)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(txtCustomerIC)
                                        .addComponent(txtContactNumber)
                                        .addComponent(txtEmail)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addComponent(cmbRoomNo, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(18, 18, 18)
                                            .addComponent(btnCheck))
                                        .addComponent(txtCustomerName, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnUpdate)
                                .addGap(18, 18, 18)
                                .addComponent(btnDelete)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 837, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(53, 53, 53))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBack))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmbDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmbDuration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8)
                            .addComponent(jLabel9))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmbRoomNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10)
                            .addComponent(btnCheck))
                        .addGap(8, 8, 8)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txtCustomerName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(txtCustomerIC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtContactNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnUpdate)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 396, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(42, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void txtSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchActionPerformed

    private void txtCustomerNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCustomerNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCustomerNameActionPerformed

    private void formWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowGainedFocus
        String filepath = "Booking.txt";
        DefaultTableModel model = (DefaultTableModel)tblUpdateBooking.getModel();
        model.setRowCount(0);
        File file = new File(filepath);
        
        try {
            Scanner inputFile = new Scanner(file);
            while (inputFile.hasNextLine()) {
                String Data = inputFile.nextLine();
                String[] bookingDetails = Data.split(",", -1);       
                int startDay = Integer.parseInt(bookingDetails[1]);
                int endDay = Integer.parseInt(bookingDetails[2]);
                int duration = endDay - startDay;
                if (duration < 1) {
                    duration = duration + 7;
                }
                String day = convertDay.convertInt(Integer.parseInt(bookingDetails[1]));
                bookingDetails[1] = day;
                bookingDetails[2] = String.valueOf(duration);
                model.addRow(bookingDetails);
                
            } 
        } catch (FileNotFoundException | NumberFormatException e) {
        }
        
        //this is to recheck the room availability checking
        if (cmbDay.getSelectedIndex() == 0 || cmbDuration.getSelectedIndex() == 0){
        } else {
            int startDay = cmbDay.getSelectedIndex();
            int duration = cmbDuration.getSelectedIndex();
            checkRoom roomsCheck = new checkRoom(startDay, duration);
            ArrayList<String> availableRooms = roomsCheck.getAvailableRooms();
            cmbRoomNo.removeAllItems();
            
            availableRooms.forEach((availableRoom) -> {
                cmbRoomNo.addItem(availableRoom);
            });     
        }
    }//GEN-LAST:event_formWindowGainedFocus

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        Homepage back = new Homepage();
        this.setVisible(false);
        back.setVisible(true);
    }//GEN-LAST:event_btnBackActionPerformed

    private void tblUpdateBookingMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblUpdateBookingMouseClicked
        // TODO add your handling code here:
        DefaultTableModel updateTable = (DefaultTableModel)tblUpdateBooking.getModel();
        cmbRoomNo.removeAllItems();
        for (int i = 1; i < 21; i++) {
            String roomNo = ("R" + i);
            cmbRoomNo.addItem(roomNo);
        }
        
        int row = tblUpdateBooking.convertRowIndexToModel(tblUpdateBooking.getSelectedRow());
        String tblRoomNo = String.valueOf(updateTable.getValueAt(row, 0));
        int tblBookDay = convertDay.convertString(String.valueOf(updateTable.getValueAt(row, 1)));
        String tblDuration = String.valueOf(updateTable.getValueAt(row, 2));
        String tblCustomerIC = String.valueOf(updateTable.getValueAt(row, 3));
        String tblCustomerName = String.valueOf(updateTable.getValueAt(row, 4));
        String tblCustomerEmail = String.valueOf(updateTable.getValueAt(row, 5));
        String tblCustomerContact = String.valueOf(updateTable.getValueAt(row, 6));
        
        
        cmbRoomNo.setSelectedItem(tblRoomNo);
        cmbDay.setSelectedIndex(tblBookDay);
        cmbDuration.setSelectedItem(tblDuration);
        txtCustomerIC.setText(tblCustomerIC);
        txtCustomerName.setText(tblCustomerName);
        txtEmail.setText(tblCustomerEmail);
        txtContactNumber.setText(tblCustomerContact);
        
    }//GEN-LAST:event_tblUpdateBookingMouseClicked

    private void btnCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckActionPerformed

        if (cmbDay.getSelectedIndex() == 0 || cmbDuration.getSelectedIndex() == 0){
        } else {
            int startDay = cmbDay.getSelectedIndex();
            int duration = cmbDuration.getSelectedIndex();
            checkRoom roomsCheck = new checkRoom(startDay, duration);
            ArrayList<String> availableRooms = roomsCheck.getAvailableRooms();
            cmbRoomNo.removeAllItems();
            
            availableRooms.forEach((availableRoom) -> {
                cmbRoomNo.addItem(availableRoom);
            });     
        }
    }//GEN-LAST:event_btnCheckActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        //check if only one row is selected in the table
        DefaultTableModel updateTable = (DefaultTableModel)tblUpdateBooking.getModel();
        if (tblUpdateBooking.getSelectedRowCount() == 1 ) {
             //checking for only selected data row
             int rowIndex = tblUpdateBooking.convertRowIndexToModel(tblUpdateBooking.getSelectedRow());

             int startDay = cmbDay.getSelectedIndex();
             int duration = cmbDuration.getSelectedIndex();
             String roomNo = String.valueOf(cmbRoomNo.getSelectedItem());
             String customerIC = txtCustomerIC.getText();
             String customerName = txtCustomerName.getText();
             String customerEmail = txtEmail.getText();
             String customerContact = txtContactNumber.getText();
             
             Booking updateBooking = new Booking(roomNo, startDay, duration, customerIC, customerName, customerEmail, customerContact, rowIndex);
             boolean updated = updateBooking.updateBooking();
             
             if (updated) {
                JOptionPane.showMessageDialog(null, "Successfully updated the data! Please move to homepage to complete payment!");
                cmbDay.setSelectedIndex(0);
                cmbDuration.setSelectedIndex(0);
                cmbRoomNo.setSelectedIndex(0);
                txtCustomerIC.setText("");
                txtCustomerName.setText("");
                txtEmail.setText("");
                txtContactNumber.setText("");
            }
             
             
        } else {
            if (tblUpdateBooking.getSelectedRowCount() == 0) {
                //no table is selected
                JOptionPane.showMessageDialog(null, "No data is selected!");
                
            } else {
                JOptionPane.showMessageDialog(null, "Please make sure to select only a row!");
            }
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        DefaultTableModel updateTable = (DefaultTableModel)tblUpdateBooking.getModel();
        if (tblUpdateBooking.getSelectedRowCount() == 1 ) {
             //checking for only selected data row
            String customerName = txtCustomerName.getText();
            String roomNo = String.valueOf(cmbRoomNo.getSelectedItem());
            int duration = cmbDuration.getSelectedIndex();
             
             int input = JOptionPane.showConfirmDialog(null, "Do you really want to delete the booking by " + customerName + " for " + roomNo + " for " + duration + " nights.",
                     "Select an Option...", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE); 
             
             if (input == 0) {
                try {
                    File file = new File("Booking.txt");
                    ArrayList<String> dataArray;
                    try (Scanner inputFile = new Scanner(file)) {
                        dataArray = new ArrayList<>();
                        while (inputFile.hasNextLine()) {
                            dataArray.add(inputFile.nextLine());
                        }
                    }
                    int rowIndex = tblUpdateBooking.convertRowIndexToModel(tblUpdateBooking.getSelectedRow());
                    String previouString = dataArray.remove(rowIndex);
                    //System.out.println(previouString); 
                    PrintWriter resetFile = new PrintWriter(file);
                    resetFile.close();
                    dataArray.forEach((data) -> {
                        try (FileWriter fw = new FileWriter(file, true); BufferedWriter bw = new BufferedWriter(fw)) {
                            bw.write(data);
                            bw.newLine();
                        } catch (IOException e) {
                            System.out.println("Unable to create file due to " + e);
                        }
                    });
                
            } catch (FileNotFoundException e) {
                System.out.println("Unable to open file due to " + e);
            }
                JOptionPane.showMessageDialog(null, "Successfully deleted the data!");
                cmbDay.setSelectedIndex(0);
                cmbDuration.setSelectedIndex(0);
                cmbRoomNo.setSelectedIndex(0);
                txtCustomerIC.setText("");
                txtCustomerName.setText("");
                txtEmail.setText("");
                txtContactNumber.setText("");
            }
             
             
        } else {
            if (tblUpdateBooking.getSelectedRowCount() == 0) {
                //no table is selected
                JOptionPane.showMessageDialog(null, "No data is selected!");
                
            } else {
                JOptionPane.showMessageDialog(null, "Please make sure to select only a row!");
            }
        }    
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void txtSearchKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyPressed
        DefaultTableModel model = (DefaultTableModel)tblUpdateBooking.getModel();
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(model);
        tblUpdateBooking.setRowSorter(sorter);
        sorter.setRowFilter(RowFilter.regexFilter("(?i)" + txtSearch.getText().trim()));
    }//GEN-LAST:event_txtSearchKeyPressed

    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased
        DefaultTableModel model = (DefaultTableModel)tblUpdateBooking.getModel();
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(model);
        tblUpdateBooking.setRowSorter(sorter);
        sorter.setRowFilter(RowFilter.regexFilter("(?i)" + txtSearch.getText().trim()));
    }//GEN-LAST:event_txtSearchKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UpdateBooking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UpdateBooking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UpdateBooking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UpdateBooking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UpdateBooking().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCheck;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> cmbDay;
    private javax.swing.JComboBox<String> cmbDuration;
    private javax.swing.JComboBox<String> cmbRoomNo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblUpdateBooking;
    private javax.swing.JTextField txtContactNumber;
    private javax.swing.JTextField txtCustomerIC;
    private javax.swing.JTextField txtCustomerName;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables
}
